import functionApply from './function-apply.js';
import toIndexedObject$1 from './to-indexed-object.js';
import toIntegerOrInfinity$1 from './to-integer-or-infinity.js';
import lengthOfArrayLike$1 from './length-of-array-like.js';
import arrayMethodIsStrict$1 from './array-method-is-strict.js';

/* eslint-disable es-x/no-array-prototype-lastindexof -- safe */


var apply = functionApply;
var toIndexedObject = toIndexedObject$1;
var toIntegerOrInfinity = toIntegerOrInfinity$1;
var lengthOfArrayLike = lengthOfArrayLike$1;
var arrayMethodIsStrict = arrayMethodIsStrict$1;
var min = Math.min;
var $lastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD; // `Array.prototype.lastIndexOf` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof

var arrayLastIndexOf = FORCED ? function lastIndexOf(searchElement
/* , fromIndex = @[*-1] */
) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return apply($lastIndexOf, this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = lengthOfArrayLike(O);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toIntegerOrInfinity(arguments[1]));
  if (index < 0) index = length + index;

  for (; index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;

  return -1;
} : $lastIndexOf;

export { arrayLastIndexOf as default };

import global$1 from './global.js';
import isCallable$1 from './is-callable.js';
import createNonEnumerableProperty$1 from './create-non-enumerable-property.js';
import './make-built-in.js';
import setGlobal$1 from './set-global.js';
import { m as makeBuiltIn$1 } from '../../../_virtual/make-built-in.js';

var global = global$1;
var isCallable = isCallable$1;
var createNonEnumerableProperty = createNonEnumerableProperty$1;
var makeBuiltIn = makeBuiltIn$1.exports;
var setGlobal = setGlobal$1;

var defineBuiltIn = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var name = options && options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);

  if (O === global) {
    if (simple) O[key] = value;else setGlobal(key, value);
    return O;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }

  if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value);
  return O;
};

export { defineBuiltIn as default };

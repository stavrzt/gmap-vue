import descriptors from './descriptors.js';
import fails$1 from './fails.js';
import anObject$1 from './an-object.js';
import objectCreate from './object-create.js';
import normalizeStringArgument$1 from './normalize-string-argument.js';

var DESCRIPTORS = descriptors;
var fails = fails$1;
var anObject = anObject$1;
var create = objectCreate;
var normalizeStringArgument = normalizeStringArgument$1;
var nativeErrorToString = Error.prototype.toString;
var INCORRECT_TO_STRING = fails(function () {
  if (DESCRIPTORS) {
    // Chrome 32- incorrectly call accessor
    // eslint-disable-next-line es-x/no-object-defineproperty -- safe
    var object = create(Object.defineProperty({}, 'name', {
      get: function () {
        return this === object;
      }
    }));
    if (nativeErrorToString.call(object) !== 'true') return true;
  } // FF10- does not properly handle non-strings


  return nativeErrorToString.call({
    message: 1,
    name: 2
  }) !== '2: 1' // IE8 does not properly handle defaults
  || nativeErrorToString.call({}) !== 'Error';
});
var errorToString = INCORRECT_TO_STRING ? function toString() {
  var O = anObject(this);
  var name = normalizeStringArgument(O.name, 'Error');
  var message = normalizeStringArgument(O.message);
  return !name ? message : !message ? name : name + ': ' + message;
} : nativeErrorToString;

export { errorToString as default };

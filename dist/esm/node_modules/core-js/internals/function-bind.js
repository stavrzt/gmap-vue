import global$1 from './global.js';
import functionUncurryThis from './function-uncurry-this.js';
import aCallable$1 from './a-callable.js';
import isObject$1 from './is-object.js';
import hasOwnProperty_1 from './has-own-property.js';
import arraySlice$1 from './array-slice.js';
import functionBindNative from './function-bind-native.js';

var global = global$1;
var uncurryThis = functionUncurryThis;
var aCallable = aCallable$1;
var isObject = isObject$1;
var hasOwn = hasOwnProperty_1;
var arraySlice = arraySlice$1;
var NATIVE_BIND = functionBindNative;
var Function = global.Function;
var concat = uncurryThis([].concat);
var join = uncurryThis([].join);
var factories = {};

var construct = function (C, argsLength, args) {
  if (!hasOwn(factories, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';

    factories[argsLength] = Function('C,a', 'return new C(' + join(list, ',') + ')');
  }

  return factories[argsLength](C, args);
}; // `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind


var functionBind = NATIVE_BIND ? Function.bind : function bind(that
/* , ...args */
) {
  var F = aCallable(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice(arguments, 1);

  var boundFunction = function
    /* args... */
  bound() {
    var args = concat(partArgs, arraySlice(arguments));
    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
  };

  if (isObject(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};

export { functionBind as default };

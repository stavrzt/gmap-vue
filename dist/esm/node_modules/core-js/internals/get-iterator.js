import global$1 from './global.js';
import functionCall from './function-call.js';
import aCallable$1 from './a-callable.js';
import anObject$1 from './an-object.js';
import tryToString$1 from './try-to-string.js';
import getIteratorMethod$1 from './get-iterator-method.js';

var global = global$1;
var call = functionCall;
var aCallable = aCallable$1;
var anObject = anObject$1;
var tryToString = tryToString$1;
var getIteratorMethod = getIteratorMethod$1;
var TypeError = global.TypeError;

var getIterator = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw TypeError(tryToString(argument) + ' is not iterable');
};

export { getIterator as default };

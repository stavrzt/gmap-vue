import isCallable$1 from './is-callable.js';
import isObject$1 from './is-object.js';
import objectSetPrototypeOf from './object-set-prototype-of.js';

var isCallable = isCallable$1;
var isObject = isObject$1;
var setPrototypeOf = objectSetPrototypeOf; // makes subclassing work correct for wrapped built-ins

var inheritIfRequired = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if ( // it can work only with native `setPrototypeOf`
  setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
  isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

export { inheritIfRequired as default };

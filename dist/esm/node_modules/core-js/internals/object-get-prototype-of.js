import global$1 from './global.js';
import hasOwnProperty_1 from './has-own-property.js';
import isCallable$1 from './is-callable.js';
import toObject$1 from './to-object.js';
import sharedKey$1 from './shared-key.js';
import correctPrototypeGetter from './correct-prototype-getter.js';

var global = global$1;
var hasOwn = hasOwnProperty_1;
var isCallable = isCallable$1;
var toObject = toObject$1;
var sharedKey = sharedKey$1;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
var IE_PROTO = sharedKey('IE_PROTO');
var Object$1 = global.Object;
var ObjectPrototype = Object$1.prototype; // `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof

var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? Object$1.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;

  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  }

  return object instanceof Object$1 ? ObjectPrototype : null;
};

export { objectGetPrototypeOf as default };

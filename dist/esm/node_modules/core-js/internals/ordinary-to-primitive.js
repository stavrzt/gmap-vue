import global$1 from './global.js';
import functionCall from './function-call.js';
import isCallable$1 from './is-callable.js';
import isObject$1 from './is-object.js';

var global = global$1;
var call = functionCall;
var isCallable = isCallable$1;
var isObject = isObject$1;
var TypeError = global.TypeError; // `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive

var ordinaryToPrimitive = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

export { ordinaryToPrimitive as default };

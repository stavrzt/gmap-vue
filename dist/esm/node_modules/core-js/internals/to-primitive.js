import global$1 from './global.js';
import functionCall from './function-call.js';
import isObject$1 from './is-object.js';
import isSymbol$1 from './is-symbol.js';
import getMethod$1 from './get-method.js';
import ordinaryToPrimitive$1 from './ordinary-to-primitive.js';
import wellKnownSymbol$1 from './well-known-symbol.js';

var global = global$1;
var call = functionCall;
var isObject = isObject$1;
var isSymbol = isSymbol$1;
var getMethod = getMethod$1;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol = wellKnownSymbol$1;
var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive

var toPrimitive = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;

  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }

  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

export { toPrimitive as default };

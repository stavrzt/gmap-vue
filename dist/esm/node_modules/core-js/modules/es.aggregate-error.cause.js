import _export from '../internals/export.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import functionApply from '../internals/function-apply.js';
import fails$1 from '../internals/fails.js';
import wrapErrorConstructorWithCause$1 from '../internals/wrap-error-constructor-with-cause.js';

var $ = _export;
var getBuiltIn = getBuiltIn$1;
var apply = functionApply;
var fails = fails$1;
var wrapErrorConstructorWithCause = wrapErrorConstructorWithCause$1;
var AGGREGATE_ERROR = 'AggregateError';
var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
var FORCED = !fails(function () {
  return $AggregateError([1]).errors[0] !== 1;
}) && fails(function () {
  return $AggregateError([1], AGGREGATE_ERROR, {
    cause: 7
  }).cause !== 7;
}); // https://github.com/tc39/proposal-error-cause

$({
  global: true,
  constructor: true,
  arity: 2,
  forced: FORCED
}, {
  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
    // eslint-disable-next-line no-unused-vars -- required for functions `.length`
    return function AggregateError(errors, message) {
      return apply(init, this, arguments);
    };
  }, FORCED, true)
});

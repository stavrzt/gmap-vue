import _export from '../internals/export.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import fails$1 from '../internals/fails.js';
import arrayBuffer from '../internals/array-buffer.js';
import anObject$1 from '../internals/an-object.js';
import toAbsoluteIndex$1 from '../internals/to-absolute-index.js';
import toLength$1 from '../internals/to-length.js';
import speciesConstructor$1 from '../internals/species-constructor.js';

var $ = _export;
var uncurryThis = functionUncurryThis;
var fails = fails$1;
var ArrayBufferModule = arrayBuffer;
var anObject = anObject$1;
var toAbsoluteIndex = toAbsoluteIndex$1;
var toLength = toLength$1;
var speciesConstructor = speciesConstructor$1;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var DataViewPrototype = DataView.prototype;
var un$ArrayBufferSlice = uncurryThis(ArrayBuffer.prototype.slice);
var getUint8 = uncurryThis(DataViewPrototype.getUint8);
var setUint8 = uncurryThis(DataViewPrototype.setUint8);
var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
}); // `ArrayBuffer.prototype.slice` method
// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice

$({
  target: 'ArrayBuffer',
  proto: true,
  unsafe: true,
  forced: INCORRECT_SLICE
}, {
  slice: function slice(start, end) {
    if (un$ArrayBufferSlice && end === undefined) {
      return un$ArrayBufferSlice(anObject(this), start); // FF fix
    }

    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;

    while (first < fin) {
      setUint8(viewTarget, index++, getUint8(viewSource, first++));
    }

    return result;
  }
});

import _export from '../internals/export.js';
import flattenIntoArray_1 from '../internals/flatten-into-array.js';
import aCallable$1 from '../internals/a-callable.js';
import toObject$1 from '../internals/to-object.js';
import lengthOfArrayLike$1 from '../internals/length-of-array-like.js';
import arraySpeciesCreate$1 from '../internals/array-species-create.js';

var $ = _export;
var flattenIntoArray = flattenIntoArray_1;
var aCallable = aCallable$1;
var toObject = toObject$1;
var lengthOfArrayLike = lengthOfArrayLike$1;
var arraySpeciesCreate = arraySpeciesCreate$1; // `Array.prototype.flatMap` method
// https://tc39.es/ecma262/#sec-array.prototype.flatmap

$({
  target: 'Array',
  proto: true
}, {
  flatMap: function flatMap(callbackfn
  /* , thisArg */
  ) {
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A;
    aCallable(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});

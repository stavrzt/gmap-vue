import _export from '../internals/export.js';
import flattenIntoArray_1 from '../internals/flatten-into-array.js';
import toObject$1 from '../internals/to-object.js';
import lengthOfArrayLike$1 from '../internals/length-of-array-like.js';
import toIntegerOrInfinity$1 from '../internals/to-integer-or-infinity.js';
import arraySpeciesCreate$1 from '../internals/array-species-create.js';

var $ = _export;
var flattenIntoArray = flattenIntoArray_1;
var toObject = toObject$1;
var lengthOfArrayLike = lengthOfArrayLike$1;
var toIntegerOrInfinity = toIntegerOrInfinity$1;
var arraySpeciesCreate = arraySpeciesCreate$1; // `Array.prototype.flat` method
// https://tc39.es/ecma262/#sec-array.prototype.flat

$({
  target: 'Array',
  proto: true
}, {
  flat: function
    /* depthArg = 1 */
  flat() {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));
    return A;
  }
});

import _export from '../internals/export.js';
import global$1 from '../internals/global.js';
import isArray$1 from '../internals/is-array.js';
import isConstructor$1 from '../internals/is-constructor.js';
import isObject$1 from '../internals/is-object.js';
import toAbsoluteIndex$1 from '../internals/to-absolute-index.js';
import lengthOfArrayLike$1 from '../internals/length-of-array-like.js';
import toIndexedObject$1 from '../internals/to-indexed-object.js';
import createProperty$1 from '../internals/create-property.js';
import wellKnownSymbol$1 from '../internals/well-known-symbol.js';
import arrayMethodHasSpeciesSupport$1 from '../internals/array-method-has-species-support.js';
import arraySlice from '../internals/array-slice.js';

var $ = _export;
var global = global$1;
var isArray = isArray$1;
var isConstructor = isConstructor$1;
var isObject = isObject$1;
var toAbsoluteIndex = toAbsoluteIndex$1;
var lengthOfArrayLike = lengthOfArrayLike$1;
var toIndexedObject = toIndexedObject$1;
var createProperty = createProperty$1;
var wellKnownSymbol = wellKnownSymbol$1;
var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$1;
var un$Slice = arraySlice;
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var SPECIES = wellKnownSymbol('species');
var Array = global.Array;
var max = Math.max; // `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects

$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

    var Constructor, result, n;

    if (isArray(O)) {
      Constructor = O.constructor; // cross-realm fallback

      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }

      if (Constructor === Array || Constructor === undefined) {
        return un$Slice(O, k, fin);
      }
    }

    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);

    result.length = n;
    return result;
  }
});

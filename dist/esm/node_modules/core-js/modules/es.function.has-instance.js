import isCallable$1 from '../internals/is-callable.js';
import isObject$1 from '../internals/is-object.js';
import '../internals/object-define-property.js';
import objectGetPrototypeOf from '../internals/object-get-prototype-of.js';
import wellKnownSymbol$1 from '../internals/well-known-symbol.js';
import '../internals/make-built-in.js';
import { __exports as objectDefineProperty } from '../../../_virtual/object-define-property.js';
import { m as makeBuiltIn$1 } from '../../../_virtual/make-built-in.js';

var isCallable = isCallable$1;
var isObject = isObject$1;
var definePropertyModule = objectDefineProperty;
var getPrototypeOf = objectGetPrototypeOf;
var wellKnownSymbol = wellKnownSymbol$1;
var makeBuiltIn = makeBuiltIn$1.exports;
var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype; // `Function.prototype[@@hasInstance]` method
// https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance

if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
    value: makeBuiltIn(function (O) {
      if (!isCallable(this) || !isObject(O)) return false;
      var P = this.prototype;
      if (!isObject(P)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

      while (O = getPrototypeOf(O)) if (P === O) return true;

      return false;
    }, HAS_INSTANCE)
  });
}

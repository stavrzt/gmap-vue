import _export from '../internals/export.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import functionApply from '../internals/function-apply.js';
import functionCall from '../internals/function-call.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import fails$1 from '../internals/fails.js';
import isArray$1 from '../internals/is-array.js';
import isCallable$1 from '../internals/is-callable.js';
import isObject$1 from '../internals/is-object.js';
import isSymbol$1 from '../internals/is-symbol.js';
import arraySlice$1 from '../internals/array-slice.js';
import nativeSymbol from '../internals/native-symbol.js';

var $ = _export;
var getBuiltIn = getBuiltIn$1;
var apply = functionApply;
var call = functionCall;
var uncurryThis = functionUncurryThis;
var fails = fails$1;
var isArray = isArray$1;
var isCallable = isCallable$1;
var isObject = isObject$1;
var isSymbol = isSymbol$1;
var arraySlice = arraySlice$1;
var NATIVE_SYMBOL = nativeSymbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);
var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')(); // MS Edge converts symbol values to JSON as {}

  return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
  || $stringify({
    a: symbol
  }) != '{}' // V8 throws on boxed symbols
  || $stringify(Object(symbol)) != '{}';
}); // https://github.com/tc39/proposal-well-formed-stringify

var ILL_FORMED_UNICODE = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"' || $stringify('\uDEAD') !== '"\\udead"';
});

var stringifyWithSymbolsFix = function (it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = replacer;
  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

  if (!isArray(replacer)) replacer = function (key, value) {
    if (isCallable($replacer)) value = call($replacer, this, key, value);
    if (!isSymbol(value)) return value;
  };
  args[1] = replacer;
  return apply($stringify, null, args);
};

var fixIllFormed = function (match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);

  if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
    return '\\u' + numberToString(charCodeAt(match, 0), 16);
  }

  return match;
};

if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({
    target: 'JSON',
    stat: true,
    arity: 3,
    forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}

import descriptors from '../internals/descriptors.js';
import global$1 from '../internals/global.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import isForced_1 from '../internals/is-forced.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';
import hasOwnProperty_1 from '../internals/has-own-property.js';
import inheritIfRequired$1 from '../internals/inherit-if-required.js';
import objectIsPrototypeOf from '../internals/object-is-prototype-of.js';
import isSymbol$1 from '../internals/is-symbol.js';
import toPrimitive$1 from '../internals/to-primitive.js';
import fails$1 from '../internals/fails.js';
import '../internals/object-get-own-property-names.js';
import '../internals/object-get-own-property-descriptor.js';
import '../internals/object-define-property.js';
import thisNumberValue$1 from '../internals/this-number-value.js';
import stringTrim from '../internals/string-trim.js';
import { __exports as objectGetOwnPropertyNames } from '../../../_virtual/object-get-own-property-names.js';
import { __exports as objectDefineProperty } from '../../../_virtual/object-define-property.js';
import { __exports as objectGetOwnPropertyDescriptor } from '../../../_virtual/object-get-own-property-descriptor.js';

var DESCRIPTORS = descriptors;
var global = global$1;
var uncurryThis = functionUncurryThis;
var isForced = isForced_1;
var defineBuiltIn = defineBuiltIn$1;
var hasOwn = hasOwnProperty_1;
var inheritIfRequired = inheritIfRequired$1;
var isPrototypeOf = objectIsPrototypeOf;
var isSymbol = isSymbol$1;
var toPrimitive = toPrimitive$1;
var fails = fails$1;
var getOwnPropertyNames = objectGetOwnPropertyNames.f;
var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var defineProperty = objectDefineProperty.f;
var thisNumberValue = thisNumberValue$1;
var trim = stringTrim.trim;
var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var TypeError = global.TypeError;
var arraySlice = uncurryThis(''.slice);
var charCodeAt = uncurryThis(''.charCodeAt); // `ToNumeric` abstract operation
// https://tc39.es/ecma262/#sec-tonumeric

var toNumeric = function (value) {
  var primValue = toPrimitive(value, 'number');
  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
}; // `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber


var toNumber = function (argument) {
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');

  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = charCodeAt(it, 0);

    if (first === 43 || first === 45) {
      third = charCodeAt(it, 2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (charCodeAt(it, 1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal of /^0b[01]+$/i

        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal of /^0o[0-7]+$/i

        default:
          return +it;
      }

      digits = arraySlice(it, 2);
      length = digits.length;

      for (index = 0; index < length; index++) {
        code = charCodeAt(digits, index); // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols

        if (code < 48 || code > maxCode) return NaN;
      }

      return parseInt(digits, radix);
    }
  }

  return +it;
}; // `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor


if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
    var dummy = this; // check on 1..constructor(foo) case

    return isPrototypeOf(NumberPrototype, dummy) && fails(function () {
      thisNumberValue(dummy);
    }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
  };

  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
  'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' + // ESNext
  'fromString,range').split(','), j = 0, key; keys.length > j; j++) {
    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }

  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  defineBuiltIn(global, NUMBER, NumberWrapper, {
    constructor: true
  });
}

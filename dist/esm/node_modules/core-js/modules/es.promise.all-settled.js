import _export from '../internals/export.js';
import functionCall from '../internals/function-call.js';
import aCallable$1 from '../internals/a-callable.js';
import '../internals/new-promise-capability.js';
import perform$1 from '../internals/perform.js';
import iterate$1 from '../internals/iterate.js';
import { __exports as newPromiseCapability } from '../../../_virtual/new-promise-capability.js';

var $ = _export;
var call = functionCall;
var aCallable = aCallable$1;
var newPromiseCapabilityModule = newPromiseCapability;
var perform = perform$1;
var iterate = iterate$1; // `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled

$({
  target: 'Promise',
  stat: true
}, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'fulfilled',
            value: value
          };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'rejected',
            reason: error
          };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

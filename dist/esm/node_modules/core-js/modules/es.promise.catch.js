import _export from '../internals/export.js';
import promiseConstructorDetection from '../internals/promise-constructor-detection.js';
import promiseNativeConstructor from '../internals/promise-native-constructor.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import isCallable$1 from '../internals/is-callable.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';

var $ = _export;
var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
var NativePromiseConstructor = promiseNativeConstructor;
var getBuiltIn = getBuiltIn$1;
var isCallable = isCallable$1;
var defineBuiltIn = defineBuiltIn$1;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype; // `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch

$({
  target: 'Promise',
  proto: true,
  forced: FORCED_PROMISE_CONSTRUCTOR,
  real: true
}, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
}); // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`

if (isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];

  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, {
      unsafe: true
    });
  }
}

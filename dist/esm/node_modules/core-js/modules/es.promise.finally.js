import _export from '../internals/export.js';
import promiseNativeConstructor from '../internals/promise-native-constructor.js';
import fails$1 from '../internals/fails.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import isCallable$1 from '../internals/is-callable.js';
import speciesConstructor$1 from '../internals/species-constructor.js';
import promiseResolve$1 from '../internals/promise-resolve.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';

var $ = _export;
var NativePromiseConstructor = promiseNativeConstructor;
var fails = fails$1;
var getBuiltIn = getBuiltIn$1;
var isCallable = isCallable$1;
var speciesConstructor = speciesConstructor$1;
var promiseResolve = promiseResolve$1;
var defineBuiltIn = defineBuiltIn$1;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype; // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829

var NON_GENERIC = !!NativePromiseConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({
    then: function () {
      /* empty */
    }
  }, function () {
    /* empty */
  });
}); // `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally

$({
  target: 'Promise',
  proto: true,
  real: true,
  forced: NON_GENERIC
}, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
}); // makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`

if (isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];

  if (NativePromisePrototype['finally'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'finally', method, {
      unsafe: true
    });
  }
}

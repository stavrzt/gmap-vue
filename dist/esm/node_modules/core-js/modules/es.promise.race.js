import _export from '../internals/export.js';
import functionCall from '../internals/function-call.js';
import aCallable$1 from '../internals/a-callable.js';
import '../internals/new-promise-capability.js';
import perform$1 from '../internals/perform.js';
import iterate$1 from '../internals/iterate.js';
import promiseStaticsIncorrectIteration from '../internals/promise-statics-incorrect-iteration.js';
import { __exports as newPromiseCapability } from '../../../_virtual/new-promise-capability.js';

var $ = _export;
var call = functionCall;
var aCallable = aCallable$1;
var newPromiseCapabilityModule = newPromiseCapability;
var perform = perform$1;
var iterate = iterate$1;
var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration; // `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race

$({
  target: 'Promise',
  stat: true,
  forced: PROMISE_STATICS_INCORRECT_ITERATION
}, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

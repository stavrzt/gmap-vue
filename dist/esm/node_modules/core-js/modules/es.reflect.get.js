import _export from '../internals/export.js';
import functionCall from '../internals/function-call.js';
import isObject$1 from '../internals/is-object.js';
import anObject$1 from '../internals/an-object.js';
import isDataDescriptor$1 from '../internals/is-data-descriptor.js';
import '../internals/object-get-own-property-descriptor.js';
import objectGetPrototypeOf from '../internals/object-get-prototype-of.js';
import { __exports as objectGetOwnPropertyDescriptor } from '../../../_virtual/object-get-own-property-descriptor.js';

var $ = _export;
var call = functionCall;
var isObject = isObject$1;
var anObject = anObject$1;
var isDataDescriptor = isDataDescriptor$1;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var getPrototypeOf = objectGetPrototypeOf; // `Reflect.get` method
// https://tc39.es/ecma262/#sec-reflect.get

function get(target, propertyKey
/* , receiver */
) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
  if (descriptor) return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === undefined ? undefined : call(descriptor.get, receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({
  target: 'Reflect',
  stat: true
}, {
  get: get
});

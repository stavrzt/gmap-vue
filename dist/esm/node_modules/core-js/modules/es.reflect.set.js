import _export from '../internals/export.js';
import functionCall from '../internals/function-call.js';
import anObject$1 from '../internals/an-object.js';
import isObject$1 from '../internals/is-object.js';
import isDataDescriptor$1 from '../internals/is-data-descriptor.js';
import fails$1 from '../internals/fails.js';
import '../internals/object-define-property.js';
import '../internals/object-get-own-property-descriptor.js';
import objectGetPrototypeOf from '../internals/object-get-prototype-of.js';
import createPropertyDescriptor$1 from '../internals/create-property-descriptor.js';
import { __exports as objectDefineProperty } from '../../../_virtual/object-define-property.js';
import { __exports as objectGetOwnPropertyDescriptor } from '../../../_virtual/object-get-own-property-descriptor.js';

var $ = _export;
var call = functionCall;
var anObject = anObject$1;
var isObject = isObject$1;
var isDataDescriptor = isDataDescriptor$1;
var fails = fails$1;
var definePropertyModule = objectDefineProperty;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var getPrototypeOf = objectGetPrototypeOf;
var createPropertyDescriptor = createPropertyDescriptor$1; // `Reflect.set` method
// https://tc39.es/ecma262/#sec-reflect.set

function set(target, propertyKey, V
/* , receiver */
) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype, setter;

  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }

    ownDescriptor = createPropertyDescriptor(0);
  }

  if (isDataDescriptor(ownDescriptor)) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;

    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
  } else {
    setter = ownDescriptor.set;
    if (setter === undefined) return false;
    call(setter, receiver, V);
  }

  return true;
} // MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype


var MS_EDGE_BUG = fails(function () {
  var Constructor = function () {
    /* empty */
  };

  var object = definePropertyModule.f(new Constructor(), 'a', {
    configurable: true
  }); // eslint-disable-next-line es-x/no-reflect -- required for testing

  return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
});
$({
  target: 'Reflect',
  stat: true,
  forced: MS_EDGE_BUG
}, {
  set: set
});

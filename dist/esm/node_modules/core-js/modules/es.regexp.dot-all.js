import global$1 from '../internals/global.js';
import descriptors from '../internals/descriptors.js';
import regexpUnsupportedDotAll from '../internals/regexp-unsupported-dot-all.js';
import classofRaw from '../internals/classof-raw.js';
import defineBuiltInAccessor$1 from '../internals/define-built-in-accessor.js';
import internalState from '../internals/internal-state.js';

var global = global$1;
var DESCRIPTORS = descriptors;
var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
var classof = classofRaw;
var defineBuiltInAccessor = defineBuiltInAccessor$1;
var getInternalState = internalState.get;
var RegExpPrototype = RegExp.prototype;
var TypeError = global.TypeError; // `RegExp.prototype.dotAll` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall

if (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {
  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {
    configurable: true,
    get: function dotAll() {
      if (this === RegExpPrototype) return undefined; // We can't use InternalStateModule.getterFor because
      // we don't add metadata for regexps created by a literal.

      if (classof(this) === 'RegExp') {
        return !!getInternalState(this).dotAll;
      }

      throw TypeError('Incompatible receiver, RegExp required');
    }
  });
}

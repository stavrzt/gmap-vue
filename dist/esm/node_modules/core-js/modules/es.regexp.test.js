import './es.regexp.exec.js';
import _export from '../internals/export.js';
import global$1 from '../internals/global.js';
import functionCall from '../internals/function-call.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import isCallable$1 from '../internals/is-callable.js';
import isObject$1 from '../internals/is-object.js';

var $ = _export;
var global = global$1;
var call = functionCall;
var uncurryThis = functionUncurryThis;
var isCallable = isCallable$1;
var isObject = isObject$1;

var DELEGATES_TO_EXEC = function () {
  var execCalled = false;
  var re = /[ac]/;

  re.exec = function () {
    execCalled = true;
    return /./.exec.apply(this, arguments);
  };

  return re.test('abc') === true && execCalled;
}();

var Error = global.Error;
var un$Test = uncurryThis(/./.test); // `RegExp.prototype.test` method
// https://tc39.es/ecma262/#sec-regexp.prototype.test

$({
  target: 'RegExp',
  proto: true,
  forced: !DELEGATES_TO_EXEC
}, {
  test: function (str) {
    var exec = this.exec;
    if (!isCallable(exec)) return un$Test(this, str);
    var result = call(exec, this, str);

    if (result !== null && !isObject(result)) {
      throw new Error('RegExp exec method returned something other than an Object or null');
    }

    return !!result;
  }
});

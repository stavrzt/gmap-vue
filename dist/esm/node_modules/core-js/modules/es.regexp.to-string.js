import functionName from '../internals/function-name.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';
import anObject$1 from '../internals/an-object.js';
import toString from '../internals/to-string.js';
import fails$1 from '../internals/fails.js';
import regexpGetFlags from '../internals/regexp-get-flags.js';

var PROPER_FUNCTION_NAME = functionName.PROPER;
var defineBuiltIn = defineBuiltIn$1;
var anObject = anObject$1;
var $toString = toString;
var fails = fails$1;
var getRegExpFlags = regexpGetFlags;
var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var n$ToString = RegExpPrototype[TO_STRING];
var NOT_GENERIC = fails(function () {
  return n$ToString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
}); // FF44- RegExp#toString has a wrong name

var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING; // `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring

if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, {
    unsafe: true
  });
}

import _export from '../internals/export.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import requireObjectCoercible$1 from '../internals/require-object-coercible.js';
import toIntegerOrInfinity$1 from '../internals/to-integer-or-infinity.js';
import toString$1 from '../internals/to-string.js';
import fails$1 from '../internals/fails.js';

var $ = _export;
var uncurryThis = functionUncurryThis;
var requireObjectCoercible = requireObjectCoercible$1;
var toIntegerOrInfinity = toIntegerOrInfinity$1;
var toString = toString$1;
var fails = fails$1;
var charAt = uncurryThis(''.charAt);
var FORCED = fails(function () {
  // eslint-disable-next-line es-x/no-array-string-prototype-at -- safe
  return 'ð ®·'.at(-2) !== '\uD842';
}); // `String.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method

$({
  target: 'String',
  proto: true,
  forced: FORCED
}, {
  at: function at(index) {
    var S = toString(requireObjectCoercible(this));
    var len = S.length;
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : charAt(S, k);
  }
});

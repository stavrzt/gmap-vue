import _export from '../internals/export.js';
import global$1 from '../internals/global.js';
import functionCall from '../internals/function-call.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import createIteratorConstructor$1 from '../internals/create-iterator-constructor.js';
import requireObjectCoercible$1 from '../internals/require-object-coercible.js';
import toLength$1 from '../internals/to-length.js';
import toString$1 from '../internals/to-string.js';
import anObject$1 from '../internals/an-object.js';
import classofRaw from '../internals/classof-raw.js';
import isRegexp from '../internals/is-regexp.js';
import regexpGetFlags from '../internals/regexp-get-flags.js';
import getMethod$1 from '../internals/get-method.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';
import fails$1 from '../internals/fails.js';
import wellKnownSymbol$1 from '../internals/well-known-symbol.js';
import speciesConstructor$1 from '../internals/species-constructor.js';
import advanceStringIndex$1 from '../internals/advance-string-index.js';
import regexpExecAbstract from '../internals/regexp-exec-abstract.js';
import internalState from '../internals/internal-state.js';
import isPure from '../internals/is-pure.js';

/* eslint-disable es-x/no-string-prototype-matchall -- safe */


var $ = _export;
var global = global$1;
var call = functionCall;
var uncurryThis = functionUncurryThis;
var createIteratorConstructor = createIteratorConstructor$1;
var requireObjectCoercible = requireObjectCoercible$1;
var toLength = toLength$1;
var toString = toString$1;
var anObject = anObject$1;
var classof = classofRaw;
var isRegExp = isRegexp;
var getRegExpFlags = regexpGetFlags;
var getMethod = getMethod$1;
var defineBuiltIn = defineBuiltIn$1;
var fails = fails$1;
var wellKnownSymbol = wellKnownSymbol$1;
var speciesConstructor = speciesConstructor$1;
var advanceStringIndex = advanceStringIndex$1;
var regExpExec = regexpExecAbstract;
var InternalStateModule = internalState;
var IS_PURE = isPure;
var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var TypeError = global.TypeError;
var stringIndexOf = uncurryThis(''.indexOf);
var un$MatchAll = uncurryThis(''.matchAll);
var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function () {
  un$MatchAll('a', /./);
});
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
  setInternalState(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: $global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState(this);
  if (state.done) return {
    value: undefined,
    done: true
  };
  var R = state.regexp;
  var S = state.string;
  var match = regExpExec(R, S);
  if (match === null) return {
    value: undefined,
    done: state.done = true
  };

  if (state.global) {
    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return {
      value: match,
      done: false
    };
  }

  state.done = true;
  return {
    value: match,
    done: false
  };
});

var $matchAll = function (string) {
  var R = anObject(this);
  var S = toString(string);
  var C = speciesConstructor(R, RegExp);
  var flags = toString(getRegExpFlags(R));
  var matcher, $global, fullUnicode;
  matcher = new C(C === RegExp ? R.source : R, flags);
  $global = !!~stringIndexOf(flags, 'g');
  fullUnicode = !!~stringIndexOf(flags, 'u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
}; // `String.prototype.matchAll` method
// https://tc39.es/ecma262/#sec-string.prototype.matchall


$({
  target: 'String',
  proto: true,
  forced: WORKS_WITH_NON_GLOBAL_REGEX
}, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var flags, S, matcher, rx;

    if (regexp != null) {
      if (isRegExp(regexp)) {
        flags = toString(requireObjectCoercible(getRegExpFlags(regexp)));
        if (!~stringIndexOf(flags, 'g')) throw TypeError('`.matchAll` does not allow non-global regexes');
      }

      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
      matcher = getMethod(regexp, MATCH_ALL);
      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher) return call(matcher, regexp, O);
    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);

    S = toString(O);
    rx = new RegExp(regexp, 'g');
    return rx[MATCH_ALL](S);
  }
});
MATCH_ALL in RegExpPrototype || defineBuiltIn(RegExpPrototype, MATCH_ALL, $matchAll);

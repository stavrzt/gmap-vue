import functionCall from '../internals/function-call.js';
import fixRegexpWellKnownSymbolLogic from '../internals/fix-regexp-well-known-symbol-logic.js';
import anObject$1 from '../internals/an-object.js';
import toLength$1 from '../internals/to-length.js';
import toString$1 from '../internals/to-string.js';
import requireObjectCoercible$1 from '../internals/require-object-coercible.js';
import getMethod$1 from '../internals/get-method.js';
import advanceStringIndex$1 from '../internals/advance-string-index.js';
import regexpExecAbstract from '../internals/regexp-exec-abstract.js';

var call = functionCall;
var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
var anObject = anObject$1;
var toLength = toLength$1;
var toString = toString$1;
var requireObjectCoercible = requireObjectCoercible$1;
var getMethod = getMethod$1;
var advanceStringIndex = advanceStringIndex$1;
var regExpExec = regexpExecAbstract; // @@match logic

fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [// `String.prototype.match` method
  // https://tc39.es/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = requireObjectCoercible(this);
    var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
    return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
  }, // `RegExp.prototype[@@match]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
  function (string) {
    var rx = anObject(this);
    var S = toString(string);
    var res = maybeCallNative(nativeMatch, rx, S);
    if (res.done) return res.value;
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;

    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = toString(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }

    return n === 0 ? null : A;
  }];
});

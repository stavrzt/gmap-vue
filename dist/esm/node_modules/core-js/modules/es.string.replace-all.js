import _export from '../internals/export.js';
import global$1 from '../internals/global.js';
import functionCall from '../internals/function-call.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import requireObjectCoercible$1 from '../internals/require-object-coercible.js';
import isCallable$1 from '../internals/is-callable.js';
import isRegexp from '../internals/is-regexp.js';
import toString$1 from '../internals/to-string.js';
import getMethod$1 from '../internals/get-method.js';
import regexpGetFlags from '../internals/regexp-get-flags.js';
import getSubstitution$1 from '../internals/get-substitution.js';
import wellKnownSymbol$1 from '../internals/well-known-symbol.js';

var $ = _export;
var global = global$1;
var call = functionCall;
var uncurryThis = functionUncurryThis;
var requireObjectCoercible = requireObjectCoercible$1;
var isCallable = isCallable$1;
var isRegExp = isRegexp;
var toString = toString$1;
var getMethod = getMethod$1;
var getRegExpFlags = regexpGetFlags;
var getSubstitution = getSubstitution$1;
var wellKnownSymbol = wellKnownSymbol$1;
var REPLACE = wellKnownSymbol('replace');
var TypeError = global.TypeError;
var indexOf = uncurryThis(''.indexOf);
uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var max = Math.max;

var stringIndexOf = function (string, searchValue, fromIndex) {
  if (fromIndex > string.length) return -1;
  if (searchValue === '') return fromIndex;
  return indexOf(string, searchValue, fromIndex);
}; // `String.prototype.replaceAll` method
// https://tc39.es/ecma262/#sec-string.prototype.replaceall


$({
  target: 'String',
  proto: true
}, {
  replaceAll: function replaceAll(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
    var position = 0;
    var endOfLastMatch = 0;
    var result = '';

    if (searchValue != null) {
      IS_REG_EXP = isRegExp(searchValue);

      if (IS_REG_EXP) {
        flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');
      }

      replacer = getMethod(searchValue, REPLACE);

      if (replacer) {
        return call(replacer, searchValue, O, replaceValue);
      }
    }

    string = toString(O);
    searchString = toString(searchValue);
    functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    searchLength = searchString.length;
    advanceBy = max(1, searchLength);
    position = stringIndexOf(string, searchString, 0);

    while (position !== -1) {
      replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
      result += stringSlice(string, endOfLastMatch, position) + replacement;
      endOfLastMatch = position + searchLength;
      position = stringIndexOf(string, searchString, position + advanceBy);
    }

    if (endOfLastMatch < string.length) {
      result += stringSlice(string, endOfLastMatch);
    }

    return result;
  }
});

import _export from '../internals/export.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import requireObjectCoercible$1 from '../internals/require-object-coercible.js';
import toIntegerOrInfinity$1 from '../internals/to-integer-or-infinity.js';
import toString$1 from '../internals/to-string.js';

var $ = _export;
var uncurryThis = functionUncurryThis;
var requireObjectCoercible = requireObjectCoercible$1;
var toIntegerOrInfinity = toIntegerOrInfinity$1;
var toString = toString$1;
var stringSlice = uncurryThis(''.slice);
var max = Math.max;
var min = Math.min; // eslint-disable-next-line unicorn/prefer-string-slice, es-x/no-string-prototype-substr -- required for testing

var FORCED = !''.substr || 'ab'.substr(-1) !== 'b'; // `String.prototype.substr` method
// https://tc39.es/ecma262/#sec-string.prototype.substr

$({
  target: 'String',
  proto: true,
  forced: FORCED
}, {
  substr: function substr(start, length) {
    var that = toString(requireObjectCoercible(this));
    var size = that.length;
    var intStart = toIntegerOrInfinity(start);
    var intLength, intEnd;
    if (intStart === Infinity) intStart = 0;
    if (intStart < 0) intStart = max(size + intStart, 0);
    intLength = length === undefined ? size : toIntegerOrInfinity(length);
    if (intLength <= 0 || intLength === Infinity) return '';
    intEnd = min(intStart + intLength, size);
    return intStart >= intEnd ? '' : stringSlice(that, intStart, intEnd);
  }
});

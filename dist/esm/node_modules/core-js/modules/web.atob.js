import _export from '../internals/export.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import fails$1 from '../internals/fails.js';
import toString$1 from '../internals/to-string.js';
import hasOwnProperty_1 from '../internals/has-own-property.js';
import validateArgumentsLength$1 from '../internals/validate-arguments-length.js';
import base64Map from '../internals/base64-map.js';

var $ = _export;
var getBuiltIn = getBuiltIn$1;
var uncurryThis = functionUncurryThis;
var fails = fails$1;
var toString = toString$1;
var hasOwn = hasOwnProperty_1;
var validateArgumentsLength = validateArgumentsLength$1;
var ctoi = base64Map.ctoi;
var disallowed = /[^\d+/a-z]/i;
var whitespaces = /[\t\n\f\r ]+/g;
var finalEq = /[=]+$/;
var $atob = getBuiltIn('atob');
var fromCharCode = String.fromCharCode;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var exec = uncurryThis(disallowed.exec);
var NO_SPACES_IGNORE = fails(function () {
  return $atob(' ') !== '';
});
var NO_ENCODING_CHECK = !fails(function () {
  $atob('a');
});
var NO_ARG_RECEIVING_CHECK = !NO_SPACES_IGNORE && !NO_ENCODING_CHECK && !fails(function () {
  $atob();
});
var WRONG_ARITY = !NO_SPACES_IGNORE && !NO_ENCODING_CHECK && $atob.length !== 1; // `atob` method
// https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob

$({
  global: true,
  enumerable: true,
  forced: NO_SPACES_IGNORE || NO_ENCODING_CHECK || NO_ARG_RECEIVING_CHECK || WRONG_ARITY
}, {
  atob: function atob(data) {
    validateArgumentsLength(arguments.length, 1);
    if (NO_ARG_RECEIVING_CHECK || WRONG_ARITY) return $atob(data);
    var string = replace(toString(data), whitespaces, '');
    var output = '';
    var position = 0;
    var bc = 0;
    var chr, bs;

    if (string.length % 4 == 0) {
      string = replace(string, finalEq, '');
    }

    if (string.length % 4 == 1 || exec(disallowed, string)) {
      throw new (getBuiltIn('DOMException'))('The string is not correctly encoded', 'InvalidCharacterError');
    }

    while (chr = charAt(string, position++)) {
      if (hasOwn(ctoi, chr)) {
        bs = bc % 4 ? bs * 64 + ctoi[chr] : ctoi[chr];
        if (bc++ % 4) output += fromCharCode(255 & bs >> (-2 * bc & 6));
      }
    }

    return output;
  }
});

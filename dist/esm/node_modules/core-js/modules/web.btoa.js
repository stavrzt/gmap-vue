import _export from '../internals/export.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import functionUncurryThis from '../internals/function-uncurry-this.js';
import fails$1 from '../internals/fails.js';
import toString$1 from '../internals/to-string.js';
import validateArgumentsLength$1 from '../internals/validate-arguments-length.js';
import base64Map from '../internals/base64-map.js';

var $ = _export;
var getBuiltIn = getBuiltIn$1;
var uncurryThis = functionUncurryThis;
var fails = fails$1;
var toString = toString$1;
var validateArgumentsLength = validateArgumentsLength$1;
var itoc = base64Map.itoc;
var $btoa = getBuiltIn('btoa');
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var NO_ARG_RECEIVING_CHECK = !!$btoa && !fails(function () {
  $btoa();
});
var WRONG_ARG_CONVERSION = !!$btoa && fails(function () {
  return $btoa(null) !== 'bnVsbA==';
});
var WRONG_ARITY = !!$btoa && $btoa.length !== 1; // `btoa` method
// https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa

$({
  global: true,
  enumerable: true,
  forced: NO_ARG_RECEIVING_CHECK || WRONG_ARG_CONVERSION || WRONG_ARITY
}, {
  btoa: function btoa(data) {
    validateArgumentsLength(arguments.length, 1);
    if (NO_ARG_RECEIVING_CHECK || WRONG_ARG_CONVERSION || WRONG_ARITY) return $btoa(toString(data));
    var string = toString(data);
    var output = '';
    var position = 0;
    var map = itoc;
    var block, charCode;

    while (charAt(string, position) || (map = '=', position % 1)) {
      charCode = charCodeAt(string, position += 3 / 4);

      if (charCode > 0xFF) {
        throw new (getBuiltIn('DOMException'))('The string contains characters outside of the Latin1 range', 'InvalidCharacterError');
      }

      block = block << 8 | charCode;
      output += charAt(map, 63 & block >> 8 - position % 1 * 8);
    }

    return output;
  }
});

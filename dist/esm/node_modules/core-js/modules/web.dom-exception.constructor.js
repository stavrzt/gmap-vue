import _export from '../internals/export.js';
import tryNodeRequire$1 from '../internals/try-node-require.js';
import getBuiltIn$1 from '../internals/get-built-in.js';
import fails$1 from '../internals/fails.js';
import objectCreate from '../internals/object-create.js';
import createPropertyDescriptor$1 from '../internals/create-property-descriptor.js';
import '../internals/object-define-property.js';
import defineBuiltIn$1 from '../internals/define-built-in.js';
import defineBuiltInAccessor$1 from '../internals/define-built-in-accessor.js';
import hasOwnProperty_1 from '../internals/has-own-property.js';
import anInstance$1 from '../internals/an-instance.js';
import anObject$1 from '../internals/an-object.js';
import errorToString$1 from '../internals/error-to-string.js';
import normalizeStringArgument$1 from '../internals/normalize-string-argument.js';
import domExceptionConstants from '../internals/dom-exception-constants.js';
import clearErrorStack$1 from '../internals/clear-error-stack.js';
import internalState from '../internals/internal-state.js';
import descriptors from '../internals/descriptors.js';
import { __exports as objectDefineProperty } from '../../../_virtual/object-define-property.js';

var $ = _export;
var tryNodeRequire = tryNodeRequire$1;
var getBuiltIn = getBuiltIn$1;
var fails = fails$1;
var create = objectCreate;
var createPropertyDescriptor = createPropertyDescriptor$1;
var defineProperty = objectDefineProperty.f;
var defineBuiltIn = defineBuiltIn$1;
var defineBuiltInAccessor = defineBuiltInAccessor$1;
var hasOwn = hasOwnProperty_1;
var anInstance = anInstance$1;
var anObject = anObject$1;
var errorToString = errorToString$1;
var normalizeStringArgument = normalizeStringArgument$1;
var DOMExceptionConstants = domExceptionConstants;
var clearErrorStack = clearErrorStack$1;
var InternalStateModule = internalState;
var DESCRIPTORS = descriptors;
var DOM_EXCEPTION = 'DOMException';
var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
var Error = getBuiltIn('Error'); // NodeJS < 17.0 does not expose `DOMException` to global

var NativeDOMException = getBuiltIn(DOM_EXCEPTION) || function () {
  try {
    // NodeJS < 15.0 does not expose `MessageChannel` to global
    var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel; // eslint-disable-next-line es-x/no-weak-map, unicorn/require-post-message-target-origin -- safe

    new MessageChannel().port1.postMessage(new WeakMap());
  } catch (error) {
    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
  }
}();

var NativeDOMExceptionPrototype = NativeDOMException && NativeDOMException.prototype;
var ErrorPrototype = Error.prototype;
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(DOM_EXCEPTION);
var HAS_STACK = ('stack' in Error(DOM_EXCEPTION));

var codeFor = function (name) {
  return hasOwn(DOMExceptionConstants, name) && DOMExceptionConstants[name].m ? DOMExceptionConstants[name].c : 0;
};

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var code = codeFor(name);
  setInternalState(this, {
    type: DOM_EXCEPTION,
    name: name,
    message: message,
    code: code
  });

  if (!DESCRIPTORS) {
    this.name = name;
    this.message = message;
    this.code = code;
  }

  if (HAS_STACK) {
    var error = Error(message);
    error.name = DOM_EXCEPTION;
    defineProperty(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  }
};

var DOMExceptionPrototype = $DOMException.prototype = create(ErrorPrototype);

var createGetterDescriptor = function (get) {
  return {
    enumerable: true,
    configurable: true,
    get: get
  };
};

var getterFor = function (key) {
  return createGetterDescriptor(function () {
    return getInternalState(this)[key];
  });
};

if (DESCRIPTORS) {
  defineBuiltInAccessor(DOMExceptionPrototype, 'code', getterFor('code'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'message', getterFor('message'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'name', getterFor('name'));
}

defineProperty(DOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, $DOMException)); // FF36- DOMException is a function, but can't be constructed

var INCORRECT_CONSTRUCTOR = fails(function () {
  return !(new NativeDOMException() instanceof Error);
}); // Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs

var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {
  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException(1, 2)) !== '2: 1';
}); // Deno 1.6.3- DOMException.prototype.code just missed

var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {
  return new NativeDOMException(1, 'DataCloneError').code !== 25;
}); // Deno 1.6.3- DOMException constants just missed

INCORRECT_CONSTRUCTOR || NativeDOMException[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;
var FORCED_CONSTRUCTOR = INCORRECT_CONSTRUCTOR; // `DOMException` constructor
// https://webidl.spec.whatwg.org/#idl-DOMException

$({
  global: true,
  constructor: true,
  forced: FORCED_CONSTRUCTOR
}, {
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});
var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (INCORRECT_TO_STRING && (NativeDOMException === PolyfilledDOMException)) {
  defineBuiltIn(PolyfilledDOMExceptionPrototype, 'toString', errorToString);
}

if (INCORRECT_CODE && DESCRIPTORS && NativeDOMException === PolyfilledDOMException) {
  defineBuiltInAccessor(PolyfilledDOMExceptionPrototype, 'code', createGetterDescriptor(function () {
    return codeFor(anObject(this).name);
  }));
}

for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {
  var constant = DOMExceptionConstants[key];
  var constantName = constant.s;
  var descriptor = createPropertyDescriptor(6, constant.c);

  if (!hasOwn(PolyfilledDOMException, constantName)) {
    defineProperty(PolyfilledDOMException, constantName, descriptor);
  }

  if (!hasOwn(PolyfilledDOMExceptionPrototype, constantName)) {
    defineProperty(PolyfilledDOMExceptionPrototype, constantName, descriptor);
  }
}
